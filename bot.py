import os
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
import sqlite3
import uuid
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_TELEGRAM_ID')  # –í–∞—à ID –≤ Telegram
PROVIDER_TOKEN = os.getenv('TELEGRAM_PAYMENTS_PROVIDER_TOKEN')  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance REAL DEFAULT 0,
        rating REAL DEFAULT 5.0,
        deals_count INTEGER DEFAULT 0,
        registered_at TEXT DEFAULT CURRENT_TIMESTAMP,
        is_banned BOOLEAN DEFAULT FALSE
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        product_id INTEGER PRIMARY KEY AUTOINCREMENT,
        seller_id INTEGER,
        title TEXT,
        description TEXT,
        price REAL,
        category TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE,
        FOREIGN KEY (seller_id) REFERENCES users (user_id)
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS deals (
        deal_id TEXT PRIMARY KEY,
        buyer_id INTEGER,
        seller_id INTEGER,
        product_id INTEGER,
        amount REAL,
        status TEXT DEFAULT 'pending',
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        completed_at TEXT,
        admin_commission REAL,
        buyer_confirmed BOOLEAN DEFAULT FALSE,
        seller_confirmed BOOLEAN DEFAULT FALSE,
        FOREIGN KEY (buyer_id) REFERENCES users (user_id),
        FOREIGN KEY (seller_id) REFERENCES users (user_id),
        FOREIGN KEY (product_id) REFERENCES products (product_id)
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø—É—Ç–∞—Ö
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS dispute_messages (
        message_id INTEGER PRIMARY KEY AUTOINCREMENT,
        deal_id TEXT,
        user_id INTEGER,
        message TEXT,
        sent_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (deal_id) REFERENCES deals (deal_id),
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    add_product_title = State()
    add_product_description = State()
    add_product_price = State()
    add_product_category = State()
    top_up_amount = State()
    withdraw_amount = State()
    dispute_message = State()
    admin_message = State()

# –ö–æ–º–∏—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_COMMISSION = 0.08  # 8%

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user(user_id):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(user_id, username):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

def update_balance(user_id, amount):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

def add_product(seller_id, title, description, price, category):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO products (seller_id, title, description, price, category) VALUES (?, ?, ?, ?, ?)',
                   (seller_id, title, description, price, category))
    product_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return product_id

def get_product(product_id):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE product_id = ?', (product_id,))
    product = cursor.fetchone()
    conn.close()
    return product

def get_user_products(user_id):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM products WHERE seller_id = ? AND is_active = TRUE', (user_id,))
    products = cursor.fetchall()
    conn.close()
    return products

def create_deal(buyer_id, seller_id, product_id, amount):
    deal_id = str(uuid.uuid4())
    commission = amount * ADMIN_COMMISSION
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO deals (deal_id, buyer_id, seller_id, product_id, amount, admin_commission)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (deal_id, buyer_id, seller_id, product_id, amount, commission))
    conn.commit()
    conn.close()
    return deal_id

def get_deal(deal_id):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM deals WHERE deal_id = ?', (deal_id,))
    deal = cursor.fetchone()
    conn.close()
    return deal

def update_deal_status(deal_id, status):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE deals SET status = ? WHERE deal_id = ?', (status, deal_id))
    if status == 'completed':
        cursor.execute('UPDATE deals SET completed_at = CURRENT_TIMESTAMP WHERE deal_id = ?', (deal_id,))
    conn.commit()
    conn.close()

def confirm_deal_for_user(deal_id, user_type):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    if user_type == 'buyer':
        cursor.execute('UPDATE deals SET buyer_confirmed = TRUE WHERE deal_id = ?', (deal_id,))
    else:
        cursor.execute('UPDATE deals SET seller_confirmed = TRUE WHERE deal_id = ?', (deal_id,))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
    cursor.execute('SELECT buyer_confirmed, seller_confirmed FROM deals WHERE deal_id = ?', (deal_id,))
    buyer_confirmed, seller_confirmed = cursor.fetchone()
    
    if buyer_confirmed and seller_confirmed:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–¥–µ–ª–∫—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å–≥–∏
        cursor.execute('SELECT amount, admin_commission, seller_id FROM deals WHERE deal_id = ?', (deal_id,))
        amount, commission, seller_id = cursor.fetchone()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
        seller_amount = amount - commission
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (seller_amount, seller_id))
        
        # –ö–æ–º–∏—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (commission, ADMIN_ID))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
        cursor.execute('UPDATE deals SET status = "completed" WHERE deal_id = ?', (deal_id,))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        cursor.execute('''
        UPDATE users SET deals_count = deals_count + 1 
        WHERE user_id IN (SELECT buyer_id FROM deals WHERE deal_id = ?)
           OR user_id IN (SELECT seller_id FROM deals WHERE deal_id = ?)
        ''', (deal_id, deal_id))
    
    conn.commit()
    conn.close()

def add_dispute_message(deal_id, user_id, message):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO dispute_messages (deal_id, user_id, message) VALUES (?, ?, ?)', 
                   (deal_id, user_id, message))
    conn.commit()
    conn.close()

def get_dispute_messages(deal_id):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT dm.message_id, dm.user_id, u.username, dm.message, dm.sent_at 
    FROM dispute_messages dm
    JOIN users u ON dm.user_id = u.user_id
    WHERE dm.deal_id = ?
    ORDER BY dm.sent_at
    ''', (deal_id,))
    messages = cursor.fetchall()
    conn.close()
    return messages

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    create_user(user_id, username)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"))
    keyboard.add(InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"), 
                InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
    keyboard.add(InlineKeyboardButton("üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="my_products"))
    keyboard.add(InlineKeyboardButton("ü§ù –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="my_deals"))
    
    await message.reply("""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CraazyDeals - –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!

üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã: –¥–µ–Ω—å–≥–∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç—Å—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
üíº –ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: 8% –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'shop')
async def show_shop(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT category FROM products WHERE is_active = TRUE')
    categories = cursor.fetchall()
    conn.close()
    
    keyboard = InlineKeyboardMarkup()
    for category in categories:
        keyboard.add(InlineKeyboardButton(category[0], callback_data=f"category_{category[0]}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def show_category_products(callback_query: types.CallbackQuery):
    category = callback_query.data.replace('category_', '')
    
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT p.product_id, p.title, p.price, u.username 
    FROM products p
    JOIN users u ON p.seller_id = u.user_id
    WHERE p.category = ? AND p.is_active = TRUE
    ''', (category,))
    products = cursor.fetchall()
    conn.close()
    
    keyboard = InlineKeyboardMarkup()
    for product in products:
        keyboard.add(InlineKeyboardButton(f"{product[1]} - {product[2]}‚ÇΩ ({product[3]})", 
                                         callback_data=f"product_{product[0]}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="shop"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:",
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
async def show_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.replace('product_', ''))
    product = get_product(product_id)
    
    if not product:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    seller_info = get_user(product[1])
    seller_username = seller_info[1] if seller_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    seller_rating = seller_info[3] if seller_info else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{product_id}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{product[4]}"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"""üì¶ <b>{product[2]}</b>

üí∞ –¶–µ–Ω–∞: <b>{product[4]}‚ÇΩ</b>
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{seller_username}</b> (—Ä–µ–π—Ç–∏–Ω–≥: {seller_rating})
üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{product[3]}

üõí –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä.""",
                              parse_mode='HTML',
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('buy_'))
async def buy_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.replace('buy_', ''))
    product = get_product(product_id)
    buyer_id = callback_query.from_user.id
    
    if not product:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if product[1] == buyer_id:
        await bot.answer_callback_query(callback_query.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    buyer = get_user(buyer_id)
    if buyer[2] < product[4]:
        await bot.answer_callback_query(callback_query.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
    deal_id = create_deal(buyer_id, product[1], product_id, product[4])
    
    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    update_balance(buyer_id, -product[4])
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    seller_keyboard = InlineKeyboardMarkup()
    seller_keyboard.add(InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"send_{deal_id}"))
    
    await bot.send_message(product[1], 
                          f"""üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{callback_query.from_user.username}
–¢–æ–≤–∞—Ä: {product[2]}
–°—É–º–º–∞: {product[4]}‚ÇΩ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.""",
                          reply_markup=seller_keyboard)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    deal_keyboard = InlineKeyboardMarkup()
    deal_keyboard.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"confirm_{deal_id}"))
    deal_keyboard.add(InlineKeyboardButton("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–ø—É—Ç", callback_data=f"dispute_{deal_id}"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"""üõí –í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!
–¢–æ–≤–∞—Ä: {product[2]}
–ü—Ä–æ–¥–∞–≤–µ—Ü: @{get_user(product[1])[1]}
–°—É–º–º–∞: {product[4]}‚ÇΩ
–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.""",
                              reply_markup=deal_keyboard)
    
    await bot.answer_callback_query(callback_query.id, "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –î–µ–Ω—å–≥–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã.")

@dp.callback_query_handler(lambda c: c.data.startswith('send_'))
async def send_product(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('send_', '')
    deal = get_deal(deal_id)
    
    if not deal:
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if callback_query.from_user.id != deal[2]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü
        await bot.answer_callback_query(callback_query.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    update_deal_status(deal_id, 'sent')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    deal_keyboard = InlineKeyboardMarkup()
    deal_keyboard.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"confirm_{deal_id}"))
    deal_keyboard.add(InlineKeyboardButton("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–ø—É—Ç", callback_data=f"dispute_{deal_id}"))
    
    await bot.send_message(deal[1],  # buyer_id
                          f"""üì¶ –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–≤–∞—Ä!
–¢–æ–≤–∞—Ä: {get_product(deal[3])[2]}
–°—É–º–º–∞: {deal[4]}‚ÇΩ

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–µ.""",
                          reply_markup=deal_keyboard)
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="‚úÖ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è.")
    
    await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_'))
async def confirm_deal(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('confirm_', '')
    deal = get_deal(deal_id)
    
    if not deal:
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if callback_query.from_user.id != deal[1]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        await bot.answer_callback_query(callback_query.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º!")
        return
    
    if deal[5] != 'sent':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–¥–µ–ª–∫—É –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    confirm_deal_for_user(deal_id, 'buyer')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    await bot.send_message(deal[2],  # seller_id
                         f"""‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!
–°–¥–µ–ª–∫–∞ #{deal_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.
–°—É–º–º–∞: {deal[4]}‚ÇΩ
–í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {deal[4] - deal[8]}‚ÇΩ (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)""")
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

@dp.callback_query_handler(lambda c: c.data.startswith('dispute_'))
async def start_dispute(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('dispute_', '')
    deal = get_deal(deal_id)
    
    if not deal:
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    user_id = callback_query.from_user.id
    if user_id not in (deal[1], deal[2]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–¥–µ–ª–∫–∏
        await bot.answer_callback_query(callback_query.id, "–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–¥–µ–ª–∫–∏!")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏—Å–ø—É—Ç–∞
    update_deal_status(deal_id, 'dispute')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    product = get_product(deal[3])
    buyer = get_user(deal[1])
    seller = get_user(deal[2])
    
    dispute_keyboard = InlineKeyboardMarkup()
    dispute_keyboard.add(InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{deal_id}"))
    dispute_keyboard.add(InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=f"refund_{deal_id}"))
    dispute_keyboard.add(InlineKeyboardButton("üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É", callback_data=f"pay_seller_{deal_id}"))
    
    await bot.send_message(ADMIN_ID,
                         f"""‚ö†Ô∏è –û–¢–ö–†–´–¢ –î–ò–°–ü–£–¢!
–°–¥–µ–ª–∫–∞: #{deal_id}
–¢–æ–≤–∞—Ä: {product[2]}
–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer[1]} (ID: {buyer[0]})
–ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller[1]} (ID: {seller[0]})
–°—É–º–º–∞: {deal[4]}‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
                         reply_markup=dispute_keyboard)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await bot.send_message(deal[1], 
                         f"""‚ö†Ô∏è –ü–æ —Å–¥–µ–ª–∫–µ #{deal_id} –æ—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç. 
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.""")
    
    await bot.send_message(deal[2], 
                         f"""‚ö†Ô∏è –ü–æ —Å–¥–µ–ª–∫–µ #{deal_id} –æ—Ç–∫—Ä—ã—Ç –¥–∏—Å–ø—É—Ç. 
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.""")
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="""‚ö†Ô∏è –î–∏—Å–ø—É—Ç –æ—Ç–∫—Ä—ã—Ç! 
–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à —Å–ª—É—á–∞–π.""")
    
    await Form.dispute_message.set()
    state = Dispatcher.get_current().current_state()
    await state.update_data(deal_id=deal_id, user_id=user_id)
    
    await bot.answer_callback_query(callback_query.id, "–î–∏—Å–ø—É—Ç –æ—Ç–∫—Ä—ã—Ç!")

@dp.message_handler(state=Form.dispute_message)
async def process_dispute_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data['deal_id']
    user_id = data['user_id']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏—Å–ø—É—Ç–µ
    add_dispute_message(deal_id, user_id, message.text)
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    user = get_user(user_id)
    await bot.send_message(ADMIN_ID,
                         f"""‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏—Å–ø—É—Ç–µ #{deal_id}
–û—Ç: @{user[1]} (ID: {user[0]})
–°–æ–æ–±—â–µ–Ω–∏–µ:
{message.text}""")
    
    await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('admin_reply_'))
async def admin_reply_to_dispute(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('admin_reply_', '')
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∏—Å–ø—É—Ç:")
    
    await Form.admin_message.set()
    state = Dispatcher.get_current().current_state()
    await state.update_data(deal_id=deal_id, is_admin=True)
    
    await bot.answer_callback_query(callback_query.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

@dp.message_handler(state=Form.admin_message)
async def process_admin_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data['deal_id']
    is_admin = data.get('is_admin', False)
    
    if is_admin:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
        deal = get_deal(deal_id)
        buyer_id = deal[1]
        seller_id = deal[2]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        await bot.send_message(buyer_id,
                             f"""‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –¥–∏—Å–ø—É—Ç—É #{deal_id}:
{message.text}""")
        
        await bot.send_message(seller_id,
                             f"""‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –¥–∏—Å–ø—É—Ç—É #{deal_id}:
{message.text}""")
        
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–¥–µ–ª–∫–∏.")
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        pass
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('refund_'))
async def refund_to_buyer(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('refund_', '')
    deal = get_deal(deal_id)
    
    if not deal:
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    update_balance(deal[1], deal[4])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    update_deal_status(deal_id, 'refunded')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await bot.send_message(deal[1],  # buyer
                         f"""üí∞ –ü–æ –¥–∏—Å–ø—É—Ç—É #{deal_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω—É—Ç—å –≤–∞–º –¥–µ–Ω—å–≥–∏.
–°—É–º–º–∞ {deal[4]}‚ÇΩ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.""")
    
    await bot.send_message(deal[2],  # seller
                         f"""‚ÑπÔ∏è –ü–æ –¥–∏—Å–ø—É—Ç—É #{deal_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.""")
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"‚úÖ –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}")
    
    await bot.answer_callback_query(callback_query.id, "–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!")

@dp.callback_query_handler(lambda c: c.data.startswith('pay_seller_'))
async def pay_to_seller(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('pay_seller_', '')
    deal = get_deal(deal_id)
    
    if not deal:
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!")
        return
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏)
    seller_amount = deal[4] - deal[8]
    update_balance(deal[2], seller_amount)
    
    # –ö–æ–º–∏—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    update_balance(ADMIN_ID, deal[8])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
    update_deal_status(deal_id, 'completed')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await bot.send_message(deal[1],  # buyer
                         f"""‚ÑπÔ∏è –ü–æ –¥–∏—Å–ø—É—Ç—É #{deal_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É.""")
    
    await bot.send_message(deal[2],  # seller
                         f"""üí∞ –ü–æ –¥–∏—Å–ø—É—Ç—É #{deal_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞–º –¥–µ–Ω—å–≥–∏.
–°—É–º–º–∞ {seller_amount}‚ÇΩ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ {deal[8]}‚ÇΩ).""")
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"‚úÖ –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}")
    
    await bot.answer_callback_query(callback_query.id, "–î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã!")

@dp.callback_query_handler(lambda c: c.data == 'balance')
async def show_balance(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up"))
    keyboard.add(InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"""üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user[2]}‚ÇΩ</b>

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.""",
                              parse_mode='HTML',
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'top_up')
async def top_up_balance(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):")
    
    await Form.top_up_amount.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=Form.top_up_amount)
async def process_top_up_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è).")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments
    prices = [LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", amount=int(amount * 100))]
    
    await bot.send_invoice(
        message.chat.id,
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount}‚ÇΩ –≤ CraazyDeals",
        provider_token=PROVIDER_TOKEN,
        currency="rub",
        prices=prices,
        payload=f"topup_{message.from_user.id}_{amount}"
    )
    
    await state.finish()

@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    payload = message.successful_payment.invoice_payload
    user_id = int(payload.split('_')[1])
    amount = float(payload.split('_')[2])
    
    # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
    update_balance(user_id, amount)
    
    await bot.send_message(user_id,
                          f"""‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!
–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_user(user_id)[2]}‚ÇΩ""")

@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def withdraw_funds(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    
    if user[2] <= 0:
        await bot.answer_callback_query(callback_query.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!")
        return
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ: {user[2]}‚ÇΩ):")
    
    await Form.withdraw_amount.set()
    state = Dispatcher.get_current().current_state()
    await state.update_data(current_balance=user[2])
    
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=Form.withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_balance = data['current_balance']
    
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return
        if amount > current_balance:
            await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    
    user_id = message.from_user.id
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
    update_balance(user_id, -amount)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤—ã–≤–æ–¥
    await bot.send_message(ADMIN_ID,
                         f"""‚ö†Ô∏è –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {user_id})
–°—É–º–º–∞: {amount}‚ÇΩ
–†–µ–∫–≤–∏–∑–∏—Ç—ã: (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å)""")
    
    await message.reply(f"""‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚ÇΩ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. 

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.""")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'profile')
async def show_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = get_user(user_id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"""üìä <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user[1]}
üí∞ –ë–∞–ª–∞–Ω—Å: {user[2]}‚ÇΩ
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {user[3]}
üõí –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {user[4]}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[5]}""",
                              parse_mode='HTML',
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'add_product')
async def add_product_start(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    
    await Form.add_product_title.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=Form.add_product_title)
async def process_product_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    
    await message.reply("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    
    await Form.add_product_description.set()

@dp.message_handler(state=Form.add_product_description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    
    await message.reply("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    
    await Form.add_product_price.set()

@dp.message_handler(state=Form.add_product_price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è).")
        return
    
    await state.update_data(price=price)
    
    await message.reply("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≥—Ä—ã', '–ê–∫–∫–∞—É–Ω—Ç—ã', '–ü—Ä–æ–≥—Ä–∞–º–º—ã'):")
    
    await Form.add_product_category.set()

@dp.message_handler(state=Form.add_product_category)
async def process_product_category(message: types.Message, state: FSMContext):
    category = message.text
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    product_id = add_product(message.from_user.id, data['title'], data['description'], data['price'], category)
    
    await message.reply(f"""‚úÖ –¢–æ–≤–∞—Ä "{data['title']}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω!

–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é "–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã".""")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'my_products')
async def show_my_products(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    products = get_user_products(user_id)
    
    if not products:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                  message_id=callback_query.message.message_id,
                                  text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    
    keyboard = InlineKeyboardMarkup()
    for product in products:
        keyboard.add(InlineKeyboardButton(f"{product[2]} - {product[4]}‚ÇΩ", callback_data=f"manage_product_{product[0]}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:",
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('manage_product_'))
async def manage_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.replace('manage_product_', ''))
    product = get_product(product_id)
    
    if not product or product[1] != callback_query.from_user.id:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_product_{product_id}"))
    keyboard.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_product_{product_id}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_products"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"""üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º:
                              
–ù–∞–∑–≤–∞–Ω–∏–µ: {product[2]}
–û–ø–∏—Å–∞–Ω–∏–µ: {product[3]}
–¶–µ–Ω–∞: {product[4]}‚ÇΩ
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[5]}""",
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('delete_product_'))
async def delete_product(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.replace('delete_product_', ''))
    product = get_product(product_id)
    
    if not product or product[1] != callback_query.from_user.id:
        await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # "–£–¥–∞–ª—è–µ–º" —Ç–æ–≤–∞—Ä (–¥–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE products SET is_active = FALSE WHERE product_id = ?', (product_id,))
    conn.commit()
    conn.close()
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=f"‚úÖ –¢–æ–≤–∞—Ä \"{product[2]}\" —É–¥–∞–ª–µ–Ω.")
    
    await bot.answer_callback_query(callback_query.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")

@dp.callback_query_handler(lambda c: c.data == 'my_deals')
async def show_my_deals(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect('craazydeals.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    cursor.execute('''
    SELECT d.deal_id, d.status, d.amount, p.title, 
           CASE WHEN d.buyer_id = ? THEN 'buyer' ELSE 'seller' END AS role,
           CASE WHEN d.buyer_id = ? THEN u2.username ELSE u1.username END AS counterparty
    FROM deals d
    JOIN products p ON d.product_id = p.product_id
    JOIN users u1 ON d.buyer_id = u1.user_id
    JOIN users u2 ON d.seller_id = u2.user_id
    WHERE d.buyer_id = ? OR d.seller_id = ?
    ORDER BY d.created_at DESC
    LIMIT 10
    ''', (user_id, user_id, user_id, user_id))
    
    deals = cursor.fetchall()
    conn.close()
    
    if not deals:
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                  message_id=callback_query.message.message_id,
                                  text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")
        return
    
    keyboard = InlineKeyboardMarkup()
    for deal in deals:
        status_emoji = "üü¢" if deal[1] == 'completed' else "üü°" if deal[1] == 'sent' else "üî¥"
        keyboard.add(InlineKeyboardButton(
            f"{status_emoji} {deal[3]} - {deal[2]}‚ÇΩ ({deal[4]})",
            callback_data=f"view_deal_{deal[0]}"
        ))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="ü§ù –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:",
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('view_deal_'))
async def view_deal(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('view_deal_', '')
    deal = get_deal(deal_id)
    user_id = callback_query.from_user.id
    
    if not deal or user_id not in (deal[1], deal[2]):
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    product = get_product(deal[3])
    buyer = get_user(deal[1])
    seller = get_user(deal[2])
    
    status_text = {
        'pending': "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏",
        'sent': "–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        'completed': "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        'refunded': "–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã",
        'dispute': "–î–∏—Å–ø—É—Ç"
    }.get(deal[5], deal[5])
    
    role = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å" if user_id == deal[1] else "–ø—Ä–æ–¥–∞–≤–µ—Ü"
    
    text = f"""üìù –°–¥–µ–ª–∫–∞ #{deal_id}

üõí –¢–æ–≤–∞—Ä: {product[2]}
üí∞ –°—É–º–º–∞: {deal[4]}‚ÇΩ
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller[1]}
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer[1]}
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {deal[6]}
üîÑ –°—Ç–∞—Ç—É—Å: {status_text}
ü§ù –í–∞—à–∞ —Ä–æ–ª—å: {role}"""

    keyboard = InlineKeyboardMarkup()
    
    if deal[5] == 'sent' and user_id == deal[1]:  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ
        keyboard.add(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"confirm_{deal_id}"))
    
    if deal[5] in ('pending', 'sent') and user_id in (deal[1], deal[2]):  # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–ø—É—Ç
        keyboard.add(InlineKeyboardButton("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å –¥–∏—Å–ø—É—Ç", callback_data=f"dispute_{deal_id}"))
    
    if deal[5] == 'dispute':
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø—É—Ç–µ
        messages = get_dispute_messages(deal_id)
        for msg in messages:
            text += f"\n\n@{msg[2]}: {msg[3]}"
        
        if user_id in (deal[1], deal[2]):
            keyboard.add(InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –≤ –¥–∏—Å–ø—É—Ç–µ", callback_data=f"reply_dispute_{deal_id}"))
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_deals"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text=text,
                              reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('reply_dispute_'))
async def reply_to_dispute(callback_query: types.CallbackQuery):
    deal_id = callback_query.data.replace('reply_dispute_', '')
    deal = get_deal(deal_id)
    user_id = callback_query.from_user.id
    
    if not deal or user_id not in (deal[1], deal[2]):
        await bot.answer_callback_query(callback_query.id, "–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏—Å–ø—É—Ç–∞:")
    
    await Form.dispute_message.set()
    state = Dispatcher.get_current().current_state()
    await state.update_data(deal_id=deal_id, user_id=user_id)
    
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'back_to_main')
async def back_to_main(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"))
    keyboard.add(InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance"), 
                InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
    keyboard.add(InlineKeyboardButton("üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="my_products"))
    keyboard.add(InlineKeyboardButton("ü§ù –ú–æ–∏ —Å–¥–µ–ª–∫–∏", callback_data="my_deals"))
    
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                              message_id=callback_query.message.message_id,
                              text="""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CraazyDeals - –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!

üîí –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã: –¥–µ–Ω—å–≥–∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç—Å—è –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
üíº –ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: 8% –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
                              reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)